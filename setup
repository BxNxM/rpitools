#!/bin/bash

arg_helper_lolcat="$SETUPLOLCAT"
quick_conf=false

# message handler function
function message() {
    local rpitools_log_path="${REPOROOT}/cache/rpitools.log"

    local msg="$1"
    if [ ! -z "$msg" ]
    then
        echo -e "$(date '+%Y.%m.%d %H:%M:%S') ${YELLOW}[ rpitools ]${NC} $msg"
        echo -e "$(date '+%Y.%m.%d %H:%M:%S') ${YELLOW}[ rpitools ]${NC} $msg" >> "$rpitools_log_path"
    fi
}

function logo() {
    local logo_text="${YELLOW}"
    logo_text+=" _____  _____  _____  _   _ ______\n"
    logo_text+="/  ___||  ___||_   _|| | | || ___ |\n"
    logo_text+="\ \'--.| |__    | |  | | | || |_/ /\n"
    logo_text+=" \`--. \|  __|   | |  | | | ||  __/ \n"
    logo_text+="/\__/ /| |___   | |  | |_| || |    \n"
    logo_text+="\____/ \____/   \_/   \___/ \_|    rpitools${NC}\n"
    echo -e "$logo_text"
}

function detect_device() {
    local _DEVICE="OTHER"
    local model_path="/sys/firmware/devicetree/base/model"
    if [ -e "$model_path" ]
    then
        echo -e "IGNORE ERRORS MSG: -bash: warning: command substitution: ignored null byte in input"
        model="$(cat $model_path)"
        model="${model,,}"
        if [[ "$model" == *"raspberry"* ]]
        then
            _DEVICE="RASPBERRY"
        else
            _DEVICE="LINUX"
        fi
    fi
    export DEVICE=$_DEVICE

    if [[  "$DEVICE" == "LINUX" ]] || [[ "$DEVICE" == "OTHER" ]]
    then
        quick_conf=true
    fi
}

function deploy_mode_text() {
    message "================================="
    message "${LIGHT_GREEN}DEPLOY MODE${NC} rpitools - WELCOME :D"
    message "================================="
    message "${LIGHT_GREEN}[1]${NC} Set your configuration: RUN COMMAND:  ${LIGHT_GREEN}confhelper, and press D${NC}"
    message "${LIGHT_GREEN}[2]${NC} Run this script in order:"
    cd "${REPOROOT}/prepare/sd_card"
    ls -l "${REPOROOT}/prepare/sd_card"
}

# detect platform (device) separate workflow in RASPBERRY | OTHER | LINUX
detect_device
# Set setup env vars and aliases
MYPATH="${BASH_SOURCE[0]}"
MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export REPOROOT="$MYDIR"
export OS=$(uname -o)
alias clean_cache="rm -f ${REPOROOT}/cache/.*_installed && rm -f ${REPOROOT}/cache/rpitools.log"

#source colors
source prepare/colors.bash
# start time measuring
source prepare/sub_elapsed_time.bash
elapsed_time "start"

logo

function set_rpiconfig_permissions() {
    local rpitools_config_path="${REPOROOT}/autodeployment/config/rpitools_config.cfg"
    if [ -e "$rpitools_config_path" ]
    then
        message "(Re)Set config permissions (-rw-------): $rpitools_config_path"
        chmod go-rw "$rpitools_config_path"
    else
        message "Config NOT exists: $rpitools_config_path [!!!]"
    fi
}

# Set two quick config access interface:
alias confhelper='${MYDIR}/autodeployment/config/confhelper.bash'
alias confighandler='${MYDIR}/autodeployment/bin/ConfigHandlerInterface.py'
if [ "$quick_conf" == "true" ]
then
    if [ "$arg_helper_lolcat" == "true" ]
    then
        echo -e "QUICK COMMANDS WAS SET:\nconfhelper -h\nconfighandler -h" | lolcat
    else
        echo -e "QUICK COMMANDS WAS SET:\nconfhelper -h\nconfighandler -h"
    fi
    deploy_mode_text
    return 0
fi

# exit if we are not on raspberyy pi
if [[ "$OS" != "GNU/Linux" ]] || [[ "$DEVICE" != "RASPBERRY" ]]
 then
    # rpitools configuration access from anywhere
    message "[INFO] For configuiration use: confhelper OR confighandler"
    message "[INFO] [MAIN SCRIPT] This script works on raspbian properly, this OS $OS DEVICE $DEVICE is not supported! => DEPLOYMENT MODE"
    run_source=false
fi

if [ -z "$run_source" ] && [ "$run_source" != "false" ]
then
    # set DISPLAY=:0 if xinit is run
    xinitrx_is_run=$(ps aux | grep "[x]initrc")
    if [ "$xinitrx_is_run" != "" ]
    then
        # set display environment (for PIXEL startx)
        message "Set DISPLAY env - gui is run"
        export DISPLAY=:0
    fi

    # restore existing backup
    output=$(pushd "${REPOROOT}/tools/"; ./cache_restore_backup.bash restore; popd)
    echo -e "$output"

    # security config permission set
    set_rpiconfig_permissions

    # config files list
    file_to_link_list=("/etc/wpa_supplicant/wpa_supplicant.conf" \
                       "/lib/systemd/system/" \
                       "/boot/config.txt" \
                       "/var/log" \
                       "/etc/fstab" \
                       "/etc/transmission-daemon/settings.json" \
                       "/etc/logrotate.conf" \
                       "/etc/hostname" \
                       "/etc/hosts" \
                       "/etc/dphys-swapfile" \
                       "/boot/cmdline.txt" \
                       "/etc/modules-load.d/raspberrypi.conf" \
                       "/home/$USER/rpitools/autodeployment/config/rpitools_config.cfg" \
                       "/etc/samba/smb.conf" \
                       "/var/www/html/" \
                       "/etc/systemd/journald.conf" \
                       "/etc/modules" \
                       "/etc/apache2/apache2.conf" \
                       "/etc/motion/motion.conf" \
                       "/etc/default/motion" \
                       "/etc/ssh/sshd_config" \
                       "/home/$USER/welcomeColor.dat" \
                       "/etc/apache2/sites-enabled/000-default.conf")
    # linking config files and used folders under config folder
    for file_path in "${file_to_link_list[@]}"
    do
        filename=$(basename "$file_path")
        extension="${filename##*.}"
        filename="${filename%.*}"

        # make directory extension correction
        if [ -d "$file_path" ]
        then
            extension=""
        else
            if [ "$extension" == "$filename" ]
            then
                extension=""
            else
                extension=".$extension"
            fi
        fi

        # make links if not exists
        if [  -e "$REPOROOT/config/${filename}${extension}" ]
        then
            message "$REPOROOT/config/${filename}${extension} is already linked"
        else
            message "Linking: ln -s ${file_path} $REPOROOT/config/${filename}${extension}"
            ln -s "${file_path}" "$REPOROOT/config/${filename}${extension}"
        fi
    done

    # validate custom - user config based on template
    /home/$USER/rpitools/autodeployment/bin/ConfigHandlerInterface.py -v
    exit_code="$?"
    if [ "$exit_code" -ne 0 ]
    then
        echo -e "Set your configuration berfore contionue!\n${GREEN}confhelper${NC}"
        INVALID_CONFIG="TRUE"
    else
        echo -e "Your configuration is valid :D"
        INVALID_CONFIG="FALSE"
    fi

    if [ "$INVALID_CONFIG" == "FALSE" ]
    then
        # set up security stuffs
        . ${REPOROOT}/prepare/system/security.bash

        # set vimrc
        if [ -f ~/.vimrc ]
        then
            message "~/.vimrc is already set"
        else
            cp ${MYDIR}/template/vimrc ~/.vimrc
            message "cp ${MYDIR}/template/vimrc ~/.vimrc ...DONE"
        fi

        # source custom aliases
        if [ -z $RPITOOLS_ALIASES ]
        then
            source ${MYDIR}/template/aliases
            message "${MYDIR}/template/aliases source ...DONE"
            export RPITOOLS_ALIASES="true"
        else
            message "${MYDIR}/template/aliases is already sourced"
        fi

        if [ -e ~/.bash_aliases ]
        then
            message "~/.bash_aliases is already exists."
        else
            message "Create ~/.bash_aliases with ${MYDIR}/template/aliases"
            echo -e "source ${MYDIR}/template/aliases" > ~/.bash_aliases
        fi

        # set ssh folder
        if [ ! -d ~/.ssh ]
        then
            message "Create ~/.ssh folder and ~/.ssh/authorized_keys file"
            mkdir ~/.ssh
            echo "" > ~/.ssh/authorized_keys
            message "Set your public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
        else
            if [ -e ~/.ssh/authorized_keys ]
            then
                is_set=$(cat ~/.ssh/authorized_keys)
                if [ "$is_set" == "" ]
                then
                   message "Set your public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
                else
                   message "~/.ssh/authorized_keys is already set"
                fi
            else
                message "Create ~/.ssh/authorized_keys file."
                echo "" > ~/.ssh/authorized_keys
                message "Set your public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
            fi
        fi

        # update once (first run ever) before install apps
        is_installed_file_indicator="$REPOROOT/cache/.first_boot_update_update_installed"
        if [ -e "$is_installed_file_indicator" ]
        then
            message "After first boot update already done"
        else
            message "Make updates after first boot."
            . ${MYDIR}/prepare/system/install_updates.bash
            if [ "$?" -eq 0 ]
            then
               echo "$(date) First boot update done" > "$is_installed_file_indicator"
            else
                message "ERROR: ${MYDIR}/prepare/system/install_updates.bash"
            fi
        fi

        # automaticly mount connected devices -  add to fstab - and mount it
        message "READ - ADD - MOUNT CONNECTED DEVICES"
        sudo /home/$USER/rpitools/tools/diskhandler/bin/diskhandler.py -sge -m

        # install tools apps
        message "Install requested programs from list ${MYDIR}/template/programs.dat:"
        . ${MYDIR}/prepare/system/install_apps.bash

        # Adafruit repo - install oled library
        if [ ! -e "${REPOROOT}/gpio/Adafruit_Python_SSD1306" ]
        then
            message "Install Adafruit_Python_SSD1306"
            pushd gpio

            message "Clone git repository: git clone https://github.com/adafruit/Adafruit_Python_SSD1306.git"
            git clone https://github.com/adafruit/Adafruit_Python_SSD1306.git
            if [ "$?" != 0 ]
            then
                message "git clone - failed"
                source /home/$USER/rpitools/setup
            else
                message "Installation: cd Adafruit_Python_SSD1306 && sudo python setup.py install"
                cd Adafruit_Python_SSD1306
                sudo python setup.py install
                if [ "$?" != 0 ]
                then
                    message "sudo python setup.py install - failed"
                    source /home/$USER/rpitools/setup
                fi
                cd -
            fi

            popd
        else
            message "Adafruit_Python_SSD1306 already installed"
        fi

        # set welcome comsole settings
        welcome_screen_settings_output=$(${REPOROOT}/tools/welcome_config/set_welcome_screen.bash)
        message "$welcome_screen_settings_output"

        # set raspberrypi.conf file for i2c
        message "Set /etc/modules-load.d/raspberrypi.conf for i2c communication"
        . ${REPOROOT}/autodeployment/lib/set_i2c_raspberrypi.conf.bash

        # set raspberrypi.conf file for spi
        message "Set /etc/modules-load.d/raspberrypi.conf for spi communication"
        . ${REPOROOT}/autodeployment/lib/set_spi_raspberrypi.conf.bash

        # set custom hostname
        . ${REPOROOT}/autodeployment/lib/set_custom_hostname.bash

        # run postinstall deplyments after reboot
        if [ -e "${REPOROOT}/cache/.first_run_reboot_done" ]
        then
            # set autodeployment post scripts
            if [ -e "${REPOROOT}/autodeployment/bin/run_post_config_actions.bash" ]
            then
                message "Run autodeployment scripts."
                . ${REPOROOT}/autodeployment/bin/run_post_config_actions.bash
            else
                message "Autodeployment post scripts not found: ${REPOROOT}/autodeployment/bin/run_post_config_actions.bash"
            fi
        else
            message "AUTODEPLOYMENT: Waiting for initial first reboot! (Run autodeployments scrits after reboot...)"
        fi

        # backup modification configs
        output=$(pushd "${REPOROOT}/tools/"; ./cache_restore_backup.bash backup; popd)
        echo -e "$output"

        # printout full elapsed time
        echo -e "${YELLOW}"
        elapsed_time "stop"
        echo -e "${NC}"

        # first run reboot
        if [ ! -e "${REPOROOT}/cache/.first_run_reboot_done" ]
        then
            echo -e "First run reboot executing..."
            echo "" > "${REPOROOT}/cache/.first_run_reboot_done"
            sudo reboot now
        fi
    fi
fi
