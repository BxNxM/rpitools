#!/bin/bash

MYPATH="${BASH_SOURCE[0]}"
MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export REPOROOT="$MYDIR"
export OS=$(uname -o)
alias clean_cache="rm -f ${REPOROOT}/cache/.*_installed"


#source colors
source colors.bash

# message handler function
function message() {

    local msg="$1"
    if [ ! -z "$msg" ]
    then
        echo -e "$(date '+%Y.%m.%d %H:%M:%S') ${YELLOW}[ rpitools ]${NC} $msg"
    fi
}

if [ "$OS" != "GNU/Linux" ]
 then
    message "This script work on raspbian, this OS $OS is not supported!"
    sleep 4
    exit 1
fi

# set display environment (for PIXEL startx)
export DISPLAY=:0

# set vimrc
if [ -f ~/.vimrc ]
then
    message "~/.vimrc is already set"
else
    cp ${MYDIR}/template/vimrc ~/.vimrc
    message "cp ${MYDIR}/template/vimrc ~/.vimrc ...DONE"
fi

# source custom aliases
if [ -z $RPITOOLS_ALIASES ]
then
    source ${MYDIR}/template/aliases
    message "${MYDIR}/template/aliases source ...DONE"
    export RPITOOLS_ALIASES="true"
else
    message "${MYDIR}/template/aliases is already sourced"
fi

if [ -e ~/.bash_aliases ]
then
    message "~/.bash_aliases is already exists."
else
    message "Create ~/.bash_aliases with ${MYDIR}/template/aliases"
    echo -e "source ${MYDIR}/template/aliases" > ~/.bash_aliases
fi

# set ssh folder
if [ ! -d ~/.ssh ]
then
    message "Create ~/.ssh folder and ~/.ssh/authorized_keys file"
    mkdir ~/.ssh
    echo "" > ~/.ssh/authorized_keys
    message "Set you public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
else
    if [ -e ~/.ssh/authorized_keys ]
    then
        is_set=$(cat ~/.ssh/authorized_keys)
        if [ "$is_set" == "" ]
        then
           message "Set you public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
        else
           message "~/.ssh/authorized_keys is already set"
        fi
    else
        message "Create ~/.ssh/authorized_keys file."
        echo "" > ~/.ssh/authorized_keys
        message "Set you public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
    fi
fi

#link wifi config file
if [  -e "$REPOROOT/config/wpa_supplicant.conf" ]
then
    message "$REPOROOT/config/wpa_supplicant.conf is already linked"
 else
    message "Linking: ln -s /etc/wpa_supplicant/wpa_supplicant.conf $REPOROOT/config/wpa_supplicant.conf"
    ln -s /etc/wpa_supplicant/wpa_supplicant.conf $REPOROOT/config/wpa_supplicant.conf
fi

# update once (first run ever) before install apps
is_installed_file_indicator="$REPOROOT/cache/.first_boot_update_update_installed"
if [ -e "$is_installed_file_indicator" ]
then
    message "After first boot update already done"
else
    message "Make updates after first boot."
    . ${MYDIR}/install_updates.bash
    if [ "$?" -eq 0 ]
    then
       echo "$(date) First boot update done" > "$is_installed_file_indicator"
    else
        message "ERROR: ${MYDIR}/install_updates.bash"
    fi
fi

# install tools apps
message "Install requested programs from list ${MYDIR}/template/programs.dat:"
. ${MYDIR}/install_apps.bash
