#!/bin/bash

MYPATH="${BASH_SOURCE[0]}"
MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export REPOROOT="$MYDIR"
export OS=$(uname -o)
alias clean_cache="rm -f ${REPOROOT}/cache/.*_installed && rm -f ${REPOROOT}/cache/rpitools.log"


#source colors
source prepare_sd/colors.bash

# message handler function
function message() {
    local rpitools_log_path="${REPOROOT}/cache/rpitools.log"

    local msg="$1"
    if [ ! -z "$msg" ]
    then
        echo -e "$(date '+%Y.%m.%d %H:%M:%S') ${YELLOW}[ rpitools ]${NC} $msg"
        echo -e "$(date '+%Y.%m.%d %H:%M:%S') ${YELLOW}[ rpitools ]${NC} $msg" >> "$rpitools_log_path"
    fi
}

if [ "$OS" != "GNU/Linux" ]
 then
    message "This script work on raspbian, this OS $OS is not supported!"
    sleep 4
    exit 1
fi

# set DISPLAY=:0 if xinit is run
xinitrx_is_run=$(ps aux | grep "[x]initrc")
if [ "$xinitrx_is_run" != "" ]
then
    # set display environment (for PIXEL startx)
    message "Set DISPLAY env - gui is run"
    export DISPLAY=:0
fi

# restore existing backup
output=$(pushd "${REPOROOT}/tools/"; ./cache_restore_backup.bash restore; popd)
echo -e "$output"

# set vimrc
if [ -f ~/.vimrc ]
then
    message "~/.vimrc is already set"
else
    cp ${MYDIR}/template/vimrc ~/.vimrc
    message "cp ${MYDIR}/template/vimrc ~/.vimrc ...DONE"
fi

# source custom aliases
if [ -z $RPITOOLS_ALIASES ]
then
    source ${MYDIR}/template/aliases
    message "${MYDIR}/template/aliases source ...DONE"
    export RPITOOLS_ALIASES="true"
else
    message "${MYDIR}/template/aliases is already sourced"
fi

if [ -e ~/.bash_aliases ]
then
    message "~/.bash_aliases is already exists."
else
    message "Create ~/.bash_aliases with ${MYDIR}/template/aliases"
    echo -e "source ${MYDIR}/template/aliases" > ~/.bash_aliases
fi

# set ssh folder
if [ ! -d ~/.ssh ]
then
    message "Create ~/.ssh folder and ~/.ssh/authorized_keys file"
    mkdir ~/.ssh
    echo "" > ~/.ssh/authorized_keys
    message "Set your public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
else
    if [ -e ~/.ssh/authorized_keys ]
    then
        is_set=$(cat ~/.ssh/authorized_keys)
        if [ "$is_set" == "" ]
        then
           message "Set your public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
        else
           message "~/.ssh/authorized_keys is already set"
        fi
    else
        message "Create ~/.ssh/authorized_keys file."
        echo "" > ~/.ssh/authorized_keys
        message "Set your public key (id_pub.rsa) for pwdless ssh in ~/.ssh/authorized_keys"
    fi
fi

#link wifi config file
if [  -e "$REPOROOT/config/wpa_supplicant.conf" ]
then
    message "$REPOROOT/config/wpa_supplicant.conf is already linked"
 else
    message "Linking: ln -s /etc/wpa_supplicant/wpa_supplicant.conf $REPOROOT/config/wpa_supplicant.conf"
    ln -s /etc/wpa_supplicant/wpa_supplicant.conf $REPOROOT/config/wpa_supplicant.conf
fi

#link systemd.system folder
if [  -e "$REPOROOT/config/systemd" ]
then
    message "$REPOROOT/config/systemd is already linked"
 else
    message "Linking: ln -s /lib/systemd/system/ $REPOROOT/config/systemd"
    ln -s /lib/systemd/system/ $REPOROOT/config/systemd
fi


#link boot.config.txt config file
if [  -e "$REPOROOT/config/config.txt" ]
then
    message "$REPOROOT/config/config.txt is already linked"
 else
    message "Linking: ln -s /boot/config.txt $REPOROOT/config/config.txt"
    ln -s /boot/config.txt $REPOROOT/config/config.txt
fi

#link /var/log log file
if [  -e "$REPOROOT/config/log" ]
then
    message "$REPOROOT/config/log is already linked"
 else
    message "Linking: ln -s /var/log $REPOROOT/config/log"
    ln -s /var/log $REPOROOT/config/log
fi

#link /etc/fstab log file
if [  -e "$REPOROOT/config/fstab" ]
then
    message "$REPOROOT/config/fstab is already linked"
 else
    message "Linking: ln -s /etc/fstab $REPOROOT/config/fstab"
    ln -s /etc/fstab $REPOROOT/config/fstab
fi

#link /etc/transmission-daemon/settings.json log file
if [  -e "$REPOROOT/config/trasmission_settings" ]
then
    message "$REPOROOT/config/trasmission_settings is already linked"
 else
    message "Linking: ln -s /etc/transmission-daemon/settings.json $REPOROOT/config/trasmission_settings"
    ln -s /etc/transmission-daemon/settings.json $REPOROOT/config/trasmission_settings
    message "usermod debian-transmission to $USER"
    sudo usermod -a -G $USER debian-transmission
    message "Before manual configuration turn off transmission service with systemctl"
    sudo systemctl stop transmission-daemon
    #sudo systemctl disable transmission-daemon
fi

#link /etc/logrotate.conf log file
if [  -e "$REPOROOT/config/logrotate.conf" ]
then
    message "$REPOROOT/config/logrotate.conf is already linked"
 else
    message "Linking: ln -s /etc/logrotate.conf $REPOROOT/config/logrotate.conf"
    ln -s /etc/logrotate.conf $REPOROOT/config/logrotate.conf
fi

# update once (first run ever) before install apps
is_installed_file_indicator="$REPOROOT/cache/.first_boot_update_update_installed"
if [ -e "$is_installed_file_indicator" ]
then
    message "After first boot update already done"
else
    message "Make updates after first boot."
    . ${MYDIR}/install_updates.bash
    if [ "$?" -eq 0 ]
    then
       echo "$(date) First boot update done" > "$is_installed_file_indicator"
    else
        message "ERROR: ${MYDIR}/install_updates.bash"
    fi
fi

if [ ! -e "${REPOROOT}/gpio/Adafruit_Python_SSD1306" ]
then
    message "Install Adafruit_Python_SSD1306"
    pushd gpio

    message "Clone git repository: git clone https://github.com/adafruit/Adafruit_Python_SSD1306.git"
    git clone https://github.com/adafruit/Adafruit_Python_SSD1306.git
    if [ "$?" != 0 ]
    then
        message "git clone - failed"
    else
        message "Installation: cd Adafruit_Python_SSD1306 && sudo python setup.py install"
        cd Adafruit_Python_SSD1306
        sudo python setup.py install
        if [ "$?" != 0 ]
        then
            message "sudo python setup.py install - failed"
        fi
        cd -
    fi

    popd
else
    message "Adafruit_Python_SSD1306 already installed"
fi

# set welcome comsole settings
welcome_screen_settings_output=$(${REPOROOT}/tools/welcome_config/set_welcome_screen.bash)
message "$welcome_screen_settings_output"

# install tools apps
message "Install requested programs from list ${MYDIR}/template/programs.dat:"
. ${MYDIR}/install_apps.bash

# backup modification configs
output=$(pushd "${REPOROOT}/tools/"; ./cache_restore_backup.bash backup; popd)
echo -e "$output"

